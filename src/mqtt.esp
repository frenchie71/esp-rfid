void connectToMqtt() {
#ifdef DEBUG
	Serial.println("[ INFO ] try to connect mqtt ");
#endif
	mqttClient.connect();
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason) {
	String reasonstr = "";
	switch (reason) {
	case (AsyncMqttClientDisconnectReason::TCP_DISCONNECTED):
		reasonstr = "TCP_DISCONNECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_UNACCEPTABLE_PROTOCOL_VERSION):
		reasonstr = "MQTT_UNACCEPTABLE_PROTOCOL_VERSION";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_IDENTIFIER_REJECTED):
		reasonstr = "MQTT_IDENTIFIER_REJECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_SERVER_UNAVAILABLE):
		reasonstr = "MQTT_SERVER_UNAVAILABLE";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_MALFORMED_CREDENTIALS):
		reasonstr = "MQTT_MALFORMED_CREDENTIALS";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_NOT_AUTHORIZED):
		reasonstr = "MQTT_NOT_AUTHORIZED";
		break;
	case (AsyncMqttClientDisconnectReason::ESP8266_NOT_ENOUGH_SPACE):
		reasonstr = "ESP8266_NOT_ENOUGH_SPACE";
		break;
	default:
		reasonstr = "Unknown";
		break;
	}
	writeEvent("WARN", "mqtt", "Disconnected from MQTT server", reasonstr);
	
	if (WiFi.isConnected()) {
		//mqttClient.setServer(mhs, mport);
		mqttReconnectTimer.once(60, connectToMqtt);
	}
}



void mqtt_publish_boot(time_t boot_time, String const &wifi, String const &ip) {
	const char *topic = mqttTopic;
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["type"] = "boot";
	root["time"] = boot_time;
	root["Wifi SSID"] = wifi;
	root["Local IP"] = ip;
	String mqttBuffer_boot;
	root.printTo(mqttBuffer_boot);
	mqttClient.publish(topic, 0, false, mqttBuffer_boot.c_str());
#ifdef DEBUG
	Serial.print("[ INFO ] Mqtt Publish:");
	Serial.println(mqttBuffer_boot);
#endif
}

void mqtt_publish_heartbeat(time_t heartbeat) {
	const char *topic = mqttTopic;
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["type"] = "heartbeat";
	root["time"] = heartbeat;
	String mqttBuffer4;
	root.printTo(mqttBuffer4);
	mqttClient.publish(topic, 0, false, mqttBuffer4.c_str());
#ifdef DEBUG
	Serial.print("[ INFO ] Mqtt Publish:");
	Serial.println(mqttBuffer4);
#endif
}

void mqtt_publish_access(time_t accesstime, String const &isknown, String const &type, String const &user, String const &uid) {
	if (mqttClient.connected()) {
		const char *topic = mqttTopic;
		DynamicJsonBuffer jsonBuffer;
		JsonObject &root = jsonBuffer.createObject();
		root["type"] = "access";
		root["time"] = accesstime;
		root["isKnown"] = isknown;
		root["access"] = type;
		root["username"] = user;
#ifndef PRIVACY
		root["uid"] = uid;
#endif
		String mqttBuffer;
		root.printTo(mqttBuffer);
		mqttClient.publish(topic, 0, false, mqttBuffer.c_str());
#ifdef DEBUG
		Serial.print("[ INFO ] Mqtt Publish:");
		Serial.println(mqttBuffer);
#endif
	}
}

void onMqttPublish(uint16_t packetId) {
	writeEvent("INFO", "mqtt", "MQTT publish acknowledged", String(packetId));
}

void onMqttConnect(bool sessionPresent) {
#ifdef DEBUG
	Serial.println("[ INFO ] MQTT Connected session");
#endif
	if (sessionPresent == true) {
#ifdef DEBUG
		Serial.println("[ INFO ]MQTT session Present: True");
#endif
		writeEvent("INFO", "mqtt", "Connected to MQTT Server", "Session Present");
	}
	mqtt_publish_boot(now(), WiFi.SSID(), WiFi.localIP().toString());
	uint16_t packetIdTOT = mqttClient.subscribe(mqttTOTTopic, 0);
#ifdef DEBUG	
  	Serial.print("Subscribing at QoS 0, packetId: ");
  	Serial.println(packetIdTOT);
#endif
}

void onMqttSubscribe(uint16_t packetId, uint8_t qos) {
#ifdef DEBUG
  Serial.println("Subscribe acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
  Serial.print("  qos: ");
  Serial.println(qos);
#endif
}

void onMqttUnsubscribe(uint16_t packetId) {
#ifdef DEBUG
  Serial.println("Unsubscribe acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
#endif
}

void onMqttMessage(char* topic, char* payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total) {
#ifdef DEBUG
  Serial.println("Publish received.");
  Serial.print("  topic: ");
  Serial.println(topic);
  Serial.print("  qos: ");
  Serial.println(properties.qos);
  Serial.print("  dup: ");
  Serial.println(properties.dup);
  Serial.print("  retain: ");
  Serial.println(properties.retain);
  Serial.print("  len: ");
  Serial.println(len);
  Serial.print("  index: ");
  Serial.println(index);
  Serial.print("  total: ");
  Serial.println(total);
#endif
	if (len > 0){ // we do have a payload
#ifdef DEBUG
  		Serial.print("  payload: ");
  		Serial.println(payload);
#endif
		// in order to open the door via MQTT, one needs to provide a valid username
		// and a valid one-time password calculated by TOTP
		// separated and terminated by a colon, e.g. john:123456:
		// colon at the end is a lazy way as payload might not be 0terminated

		char *user,*otp,*saveptr;
		user=strtok_r(payload,":",&saveptr);
		otp=strtok_r(NULL,":",&saveptr);
		if ((user != NULL) && (otp != NULL)){ // we have a valid user:otp pair
			// lets convert to uppercase in order to be case insensitive here
			 char *s = user;
			 while (*s) {
    			*s = toupper((unsigned char) *s);
    			s++;
  			}
#ifdef DEBUG
  			Serial.print("  user: ");
  			Serial.println(user);
  			Serial.print("  otp: ");
  			Serial.println(otp);
#endif
			// now find the user in the database and check if the one time password is valid
			// if so, open the door
			// publish the result to MQTT

			Dir dir = SPIFFS.openDir("/P/"); // open the  directory
			activateRelay = false;

			while (dir.next() && (activateRelay == false)) { // if in the meanwhile we have found the user we do not need to look further
				String uid = dir.fileName(); // filename == uid
				uid.remove(0, 3); // removve the path name from the filename
				File f = SPIFFS.open(dir.fileName(), "r"); // open for read
				size_t size = f.size();
				std::unique_ptr<char[]> buf(new char[size]); // allocate one-time read buffer
				f.readBytes(buf.get(), size);
				DynamicJsonBuffer jsonBuffer2;
				JsonObject &json = jsonBuffer2.parseObject(buf.get()); // parse buffer to json object
				if (json.success()) {
					String username = json["user"];
					username.toUpperCase();
					if (username.equals(user)){
						int AccType = json["acctype"];
#ifdef DEBUG
						Serial.print("[ INFO ] FOUND User Name: ");
						Serial.println(username);
#endif
						if (AccType == ACCESS_GRANTED)
						{
							unsigned long validuntil = json["validuntil"];
							unsigned long nowL = now();
							if (validuntil > nowL)
							{
								// Username, Access and valid - lets check the totp code
								// @TODO: store totpsalt in user record
								// for the time being we use a hardcoded key
								//String totpSalt = json["totpsalt"];
								String totpSalt = uid + "vhcn934trtvn8zt"; // we add the pin to the salt so the user must have known the pin in order to generate correct key
 								uint8_t keyBytes[TOTP_SECRET_BYTE_COUNT];
    							for (int j = 0; j < TOTP_SECRET_BYTE_COUNT; j++)
									keyBytes[j] = totpSalt.charAt(j);
								int totpCode = atoi(otp);
								yield();
								if (ESP8266TOTP::IsTokenValid(nowL, keyBytes, totpCode)) 
								{
									Serial.println("1");
									activateRelay = true;
#ifdef DEBUG
									Serial.println(" User has access, relay activated");
#endif
								}
								else
								{
#ifdef DEBUG
									Serial.println(" User has access, but wrong one time password");
#endif
								}
								yield();
							}
							else
							{
#ifdef DEBUG
								Serial.println(" User account expired");
#endif
							}
						} // Access_Granted
						else
						{
#ifdef DEBUG
							Serial.println(" User exists but has no access");
#endif
						}
					} // username equals user	

				} // json success
			} // dir next
		}	// user, otp != NULL
	} // len > 0
}
